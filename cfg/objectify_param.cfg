#! /usr/bin/env python
#Autogenerated V4L Dynamic Control

PACKAGE='objectify'
from dynamic_reconfigure.parameter_generator_catkin import *
gen = ParameterGenerator()

gen.add( "sim_rob_alfa_1"                 , double_t,0, "maximum outlier from reference frame"                                                  ,  0.1,    0,   10)
gen.add( "sim_rob_alfa_2"                 , double_t,0, "maximum outlier from reference frame"                                                  ,0.005,    0,   10)
gen.add( "sim_rob_alfa_3"                 , double_t,0, "maximum outlier from reference frame"                                                  ,0.005,    0,   10)
gen.add( "sim_rob_alfa_4"                 , double_t,0, "maximum outlier from reference frame"                                                  ,  0.1,    0,   10)
gen.add( "sim_sensor_r_max"               , double_t,0, "Maxmimum non-infinity sensor range (m)"                                                ,  4.9,    0,   30)
gen.add( "sim_sensor_noise_sigma"         , double_t,0, "Sigma value for simulated sensor noise (m)"                                            ,    0,    0,  0.2)
gen.add( "sim_pause"                      , bool_t  ,0, "Debug mode, pausing gazebo                 "                                                       ,False)
gen.add( "sim_step"                       , bool_t  ,0, "Stepping gazebo sim one loop cycle (only when simulation is paused)"                               ,False)

gen.add( "sleep_freq"                     , double_t,0, "Main loop sleep freq (Hz)"                                                             ,    8,    1,  100)

gen.add( "viz_data"                       , bool_t  ,0, "Open robot view window"                                                                            , True)
gen.add( "viz_data_grid"                  , bool_t  ,0, "Plots data img grid"                                                                               , True)
gen.add( "viz_data_raw"                   , bool_t  ,0, "Plots raw data"                                                                                    , True)
gen.add( "viz_data_preproc"               , bool_t  ,0, "Plots preprocessed data"                                                                           ,False)
gen.add( "viz_data_oult_preproc"          , bool_t  ,0, "Plots accepted/rejected point circles in outlier erase"                                            ,False)
gen.add( "viz_data_segm_init"             , bool_t  ,0, "Plots segmented data initial"                                                                      , True)
gen.add( "viz_data_segm_ext"              , bool_t  ,0, "Plots segmented data extended"                                                                     , True)
gen.add( "viz_data_corr_links"            , bool_t  ,0, "Plots neighbouring links after correlation"                                                        , True)
gen.add( "viz_data_tf"                    , bool_t  ,0, "Plot tf-ed segments"                                                                               , True)

gen.add( "viz_convol"                     , bool_t  ,0, "Open convolution window"                                                                           ,False)
gen.add( "viz_correl_queue_no"            , int_t   ,0, "Plot convolution results of a certain icp queue"                                       ,    0,    0,   20)
gen.add( "viz_convol_step_no"             , int_t   ,0, "Plot convolution results of a certain icp link in a certain shift (0 means best match)",    0,    0,  500)
gen.add( "viz_convol_all"                 , bool_t  ,0, "plot all searched positions (not only accepted ones)"                                              , True)
gen.add( "viz_convol_normals"             , bool_t  ,0, "plot normal direction arrows"                                                                      ,False)
gen.add( "viz_convol_tf"                  , bool_t  ,0, "plot tf arrows"                                                                                    , True)
gen.add( "viz_convol_tf_ref2spl"          , bool_t  ,0, "blabla"                                                                                            , True)

gen.add( "preproc_filter"                 , bool_t  ,0, "Range image filtering"                                                                             ,False)
gen.add( "preproc_filter_circle_rad"      , double_t,0, "Filtering radius threshold (m)"                                                        ,  0.1,    0,    2)
gen.add( "preproc_filter_circle_rad_scale", bool_t  ,0, "Search circle scales with radius of the point"                                                     , True)
gen.add( "preproc_filter_sigma"           , double_t,0, "Filtering gaussian sigma (m)"                                                          ,  1.5,  0.1,    3)

gen.add( "segm_outl_circle_rad"           , double_t,0, "Outlier removal radius threshold (m)"                                                  ,  0.2,    0,    2)
gen.add( "segm_outl_sigma"                , double_t,0, "Outlier removal gaussian sigma (m)"                                                    ,  1.5,  0.1,    3)
gen.add( "segm_outl_prob_thres"           , double_t,0, "Outlier removal probability (neighbouring points gain %)"                              ,  100,    0, 1000)
gen.add( "segm_discont_dist"              , double_t,0, "Minimal point-to-point discontinuity distance (m)"                                     ,  0.3,  0.1,    4)

gen.add( "corr_queue_d_thres"             , double_t,0, "icp_link_thres"                                                                        ,  0.5,  0.0,  1.0)
gen.add( "corr_neigh_circle_rad"          , double_t,0, "Search radius when looking for stitching segment points"                               ,    1,    0,    3)

gen.add( "convol_full_search"             , bool_t  ,0, "run full conv search (not only dist bound)"                                                        ,False)
gen.add( "convol_key_d_angle"             , int_t   ,0, "Normal direction quantization angle(deg)"                                              ,   10,    1,   45)
gen.add( "convol_SVD"                     , bool_t  ,0, "true if convolution uses SVD "                                                                     , True)
gen.add( "convol_normals_smooth_mask_size", int_t   ,0, "gauss_mask_size"                                                                       ,    7,    0,   10)
gen.add( "convol_normals_smooth_mask_dist", double_t,0, "gauss_mask_dist"                                                                       , 0.02, 0.01,    2)
gen.add( "convol_sample_dist"             , double_t,0, "icp_sample_dist"                                                                       , 0.03, 0.01,  0.3)
gen.add( "convol_min_len_perc"            , double_t,0, "minimum accepted snapping length percentage "                                          ,  0.5,    0,    1)
gen.add( "convol_marg_extr_excl"          , int_t   ,0, "convol_marg_extr_excl"                                                                 ,    0,    0,  100)
gen.add( "convol_com_dr_thres"            , double_t,0, "convol_com_d_max"                                                                      ,  1.0,  0.1,    3)
gen.add( "convol_ang_mean_thres"          , int_t   ,0, "deg"                                                                                   ,   40,    0,  180)
gen.add( "convol_ang_var_thres"           , double_t,0, "convol_err_thres"                                                                      , 0.07,0.00001,0.5)
gen.add( "convol_sqr_err_thres"           , double_t,0, "convol_err_thres"                                                                      ,0.001,0.00001,0.5)
gen.add( "convol_p_no_perc_thres"         , int_t   ,0, "maximum outlier from reference frame"                                                  ,   20,    0,  100)

gen.add( "kalman_rob_alfa_1"              , double_t,0, "maximum outlier from reference frame"                                                  , 0.1,    0,   10)
gen.add( "kalman_rob_alfa_2"              , double_t,0, "maximum outlier from reference frame"                                                  ,0.01,    0,   10)
gen.add( "kalman_rob_alfa_3"              , double_t,0, "maximum outlier from reference frame"                                                  ,0.01,    0,   10)
gen.add( "kalman_rob_alfa_4"              , double_t,0, "maximum outlier from reference frame"                                                  , 0.11,    0,   10)
gen.add( "kalman_obj_alfa_xy"             , double_t,0, "maximum outlier from reference frame"                                                  ,  0.5,    0,   10)
gen.add( "kalman_obj_alfa_phi"            , double_t,0, "maximum outlier from reference frame"                                                  ,0.0001,   0,   10)
gen.add( "kalman_obj_timeout"             , double_t,0, "maximum outlier from reference frame"                                                  ,   30,    0,   30)

exit(gen.generate(PACKAGE, "objectify", "objectify_param"))
